# Load data
load(file='Data/Input_data.RData')
load(file='Output/Sign_test.RData')
d.norm <- t(d.norm)
# Check for missing values in data
check.missing <- goodSamplesGenes(d.norm, verbose = 3)
check.missing$allOK

# Calculate the similarity matrix
TOM <- TOMsimilarityFromExpr(d.norm, power=7)
#correlations.clustering <- cor(t(d.cs))

# Separate modules
moduleColors <- labels2colors(net.norm$colors)
modules <- levels(as.factor(moduleColors))
log2.TAU.con <- d.summary$log2FC_TAU_control
P.TAU.con <- d.summary$Pvalue_TAU_control

# Thresholds for edges
thresholds <- list(black=0.065,
                   blue=0.15,
                   brown=0.13,
                   cyan=0.025,
                   green=0.085,
                   greenyellow=0.025,
                   grey=0.006,
                   grey60=0.042,
                   lightcyan=0.05,
                   lightgreen=0.055,
                   magenta=0.06,
                   midnightblue=0.05,
                   pink=0.09,
                   purple=0.04,
                   red=0.08,
                   salmon=0.04,
                   tan=0.03,
                   turquoise=0.25,
                   yellow=0.13)

# Get table with interactions for each module
for (module in modules){
  print(module)
  # Create empty dataframes
  #edges.matrix.all <- data.frame(matrix(nrow=0, ncol=2))
  #edges.matrix.1 <- data.frame(matrix(nrow=0, ncol=2))
  #edges.matrix.2 <- data.frame(matrix(nrow=0, ncol=2))
  #edges.matrix.3 <- data.frame(matrix(nrow=0, ncol=2))
  edges.matrix.temp <- data.frame(matrix(nrow=0, ncol=2))
  edges.matrix.temp2 <- data.frame(matrix(nrow=0, ncol=2))
  
  # Select proteins in module
  inModule <- moduleColors == module
  sum(inModule)
  TOMmodule <- TOM[inModule, inModule]
  idsModule <- ids[inModule]
  log2ModuleProteins <- log2.TAU.con[inModule]
  PModuleProteins <- P.TAU.con[inModule]
  
  namesModule <- unlist(lapply(d.summary[idsModule,'Gene.names'], function(x){strsplit(x, split=' ')[[1]][1]}))
  for (i in 1:length(namesModule)){
    # If there is no gene name associated with the Uniprot ID, keep the uniprot ID
    if (is.na(namesModule[i])){
      namesModule[i] <- idsModule[i]
    }
  }
  node.frame <- data.frame(ID=idsModule, LogFC=log2ModuleProteins, Pvalue=PModuleProteins, Symbol=namesModule)
  write.table(node.frame, file=paste0('nodes_', module, '.tsv'), col.names=TRUE, row.names=FALSE, sep='\t', quote=FALSE)
  names(namesModule) <- idsModule
  #nodeColorsModule <- node.colors[inModule]
  
  # Write tables: one with edges between all nodes, one with a treshold of 0.05 and one with custom thresholds
  for (i in 1:(nrow(TOMmodule)-1)){
    print(i)
    for (j in (i+1):nrow(TOMmodule)){
      #edges.matrix.all[nrow(edges.matrix.all)+1,] <- c(namesModule[i],namesModule[j])
      #if (TOMmodule[i,j] > 0.03){
      #  edges.matrix.1[nrow(edges.matrix.1)+1,] <- c(namesModule[i],namesModule[j])
      #}
      #if (TOMmodule[i,j] > 0.08){
      #  edges.matrix.3[nrow(edges.matrix.3)+1,] <- c(namesModule[i],namesModule[j])
      #}
      #if (TOMmodule[i,j] > thresholds[module]){
      #  edges.matrix.2[nrow(edges.matrix.2)+1,] <- c(namesModule[i],namesModule[j])
      #}
      if (TOMmodule[i,j] > 0.01){
        edges.matrix.temp[nrow(edges.matrix.temp)+1,] <- c(namesModule[i],namesModule[j])
      }
      if (TOMmodule[i,j] > 0.1){
        edges.matrix.temp2[nrow(edges.matrix.temp2)+1,] <- c(namesModule[i],namesModule[j])
      }
    }
  }
  #write.table(edges.matrix.all, file=paste0('name_edges_expression_all_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  #write.table(edges.matrix.1, file=paste0('name_edges_expression_003_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  #write.table(edges.matrix.2, file=paste0('name_edges_expression_custom_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  #write.table(edges.matrix.3, file=paste0('name_edges_expression_008_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  write.table(edges.matrix.temp, file=paste0('name_edges_expression_001_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  write.table(edges.matrix.temp2, file=paste0('name_edges_expression_01_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
}

# Do the same as above, but write all modules in the same network
# Create empty dataframes
edges.matrix.all <- data.frame(matrix(nrow=0, ncol=2))
edges.matrix.1 <- data.frame(matrix(nrow=0, ncol=2))
edges.matrix.2 <- data.frame(matrix(nrow=0, ncol=2))
edges.matrix.3 <- data.frame(matrix(nrow=0, ncol=2))

namesModules <- unlist(lapply(d.summary[ids,'Gene.names'], function(x){strsplit(x, split=' ')[[1]][1]}))
for (i in 1:length(namesModules)){
  # If there is no gene name associated with the Uniprot ID, keep the uniprot ID
  if (is.na(namesModules[i])){
    namesModules[i] <- idsModule[i]
  }
}
names(namesModules) <- ids
node.frame <- data.frame(ID=ids, LogFC=log2.TAU.con, Pvalue=P.TAU.con, Symbol=namesModules)

for (module in modules){
  print(module)

  # Write tables: one with edges between all nodes, one with a treshold of 0.05 and one with custom thresholds
  for (i in 1:(nrow(TOM)-1)){
    print(i)
    for (j in (i+1):nrow(TOM)){
      edges.matrix.all[nrow(edges.matrix.all)+1,] <- c(namesModule[i],namesModule[j])
      if (TOM[i,j] > 0.03){
        edges.matrix.1[nrow(edges.matrix.1)+1,] <- c(namesModule[i],namesModule[j])
      }
      if (TOM[i,j] > 0.08){
        edges.matrix.3[nrow(edges.matrix.1)+1,] <- c(namesModule[i],namesModule[j])
      }
      if (TOM[i,j] > thresholds[module]){
        edges.matrix.2[nrow(edges.matrix.2)+1,] <- c(namesModule[i],namesModule[j])
      }
    }
  }
}
write.table(edges.matrix.all, file='name_edges_expression_all.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
write.table(edges.matrix.1, file='name_edges_expression_003.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
write.table(edges.matrix.2, file='name_edges_expression_custom.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
write.table(edges.matrix.3, file='name_edges_expression_008.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)

# Write node input
node.frame <- data.frame(ID=ids, LogFC=log2.TAU.con, Pvalue=P.TAU.con, Symbol=namesModules)
write.table(node.frame, file=paste0('nodes_all.tsv'), col.names=TRUE, row.names=FALSE, sep='\t', quote=FALSE)


# Write score files
log2.TAU.con.inv <- -log2.TAU.con
P.score <- 1 - P.TAU.con
write.table(node.frame[,c('Symbol', 'LogFC')], file='g2s_log2_all.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
write.table(data.frame(Symbol=node.frame[, 'Symbol'], invlogFC=log2.TAU.con.inv), file='g2s_invlog2_all.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
write.table(data.frame(Symbol=node.frame[, 'Symbol'], Pvalue=P.score), file='g2s_Pval_all.tsv', col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
for (module in modules){
  inModule <- moduleColors == module
  sum(inModule)
  write.table(node.frame[inModule, c('Symbol', 'LogFC')], file=paste0('g2s_log2_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  write.table(data.frame(Symbol=node.frame[inModule, 'Symbol'], invlogFC=log2.TAU.con.inv[inModule]), file=paste0('g2s_invlog2_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
  write.table(data.frame(Symbol=node.frame[inModule, 'Symbol'], Pvalue=P.score[inModule]), file=paste0('g2s_Pval_', module, '.tsv'), col.names=FALSE, row.names=FALSE, sep='\t', quote=FALSE)
}


#colnames(edges.matrix) <- c('Protein1', 'Protein2')
#for (i in 1:1800){
#  print(i)
#  for (j in (i+1):1801){
#    if (TOM[i,j] > 0.01){
#      edges.matrix[nrow(edges.matrix)+1,] <- c(ids[i],ids[j])
#    }
#  }
#}




http://amigo.geneontology.org/amigo/term/GO:0000823