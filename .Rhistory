# Calculate actual values
if(m.ids != FALSE){
m.FC1 <- FC1[m.ids]
m.P1 <- P1[m.ids]
} else {
m.FC1 <- FC1
m.P1 <- P1
}
values.real <- calculate.curve(m.FC1, m.FC2, m.P1, m.P2, t.values)
names(values.real) <- t.values
# Plot histograms with the score distributions
checks <- c(checks, 'GESS')
pvals <- rep(NA, length(checks))
names(pvals) <- checks
for(x in checks){
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
x
colnames(d.perm)
checks
for(x in checks[-"GESS"]){
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
for(x in checks[-c('GESS')]){
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
checks
for(x in checks[1:(length(checks)-1)]){
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
head(pvals)
head(pvals)checks
checks
length(checks)
checks[7]
length(checks)-1
checks[1:7]
# Plot histograms with the score distributions
checks <- c(checks, 'GESS')
pvals <- rep(NA, length(checks))
names(pvals) <- checks
for(x in checks[1:(length(checks)-1)]){
print(x)
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
# Plot histograms with the score distributions
checks <- c(checks, 'GESS')
pvals <- rep(NA, length(checks))
pvals
names(pvals) <- checks
pvals
checks
checks <- checks[1:8]
checks
pvals <- rep(NA, length(checks))
names(pvals) <- checks
pvals
for(x in checks[1:(length(checks)-1)]){
print(x)
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
p.gess <- mean(pvals[to.check])
checks
checks <- checks[1:7]
checks
# Calculate GESS score
# Method 1
to.check <- unlist(lapply(c(0.1, 0.2, 0.5, 0.8), as.character))
to.check
# Plot histograms with the score distributions
#checks <- c(checks, 'GESS')
pvals <- rep(NA, length(checks))
names(pvals) <- checks
for(x in checks){
x <- as.character(x)
png(file=paste0(fig.folder, 'permutation_density_', x, '.png'), width=720, height=480)
hist(d.perm[,x], breaks=50, freq=TRUE, xlim=c(0,max(c(max(d.perm[,x])+0.05), values.real[x]+0.05)))
#lines(density(d.perm[,x]), lwd=2)
points(values.real[x], 0, pch=4, lwd=2)
dev.off()
#p.value <- t.test(d.perm[,x], mu=values.real[x])$p.value
p.value <- pnorm(values.real[x], mean=mean(d.perm[,x]), sd=sd(d.perm[,x]), lower.tail=FALSE)
pvals[x] <- p.value
}
pvals
checks
p.gess <- mean(pvals[to.check])
#pvals['GESS'] <- p.gess
#pvals['GESS2'] <- p.gess2
pvals['GESS'] <- p.gess
pvals
# Plot curves
png(file=paste0(fig.folder, 'permutation_error_curve.png'), width=480, height=480)
for(i in 1:nrow(d.perm)){
if(i==1){
plot(t.values, d.perm[i,-'GESS'], type='l', lwd=1, col='grey', ylim=c(0,1), xlab='P-value threshold', ylab='Fraction validated', cex.lab=1.5, cex.axis=1.5, las=1)#xaxt='n', yaxt='n')
#axis(las=1)
} else{
lines(t.values, d.perm[i,-'GESS'], type='l', lwd=1, col='grey')
}
}
colnames(d.perm)
# Plot curves
png(file=paste0(fig.folder, 'permutation_error_curve.png'), width=480, height=480)
for(i in 1:nrow(d.perm)){
if(i==1){
plot(t.values, d.perm[i,], type='l', lwd=1, col='grey', ylim=c(0,1), xlab='P-value threshold', ylab='Fraction validated', cex.lab=1.5, cex.axis=1.5, las=1)#xaxt='n', yaxt='n')
#axis(las=1)
} else{
lines(t.values, d.perm[i,], type='l', lwd=1, col='grey')
}
}
lines(t.values, values.real[-'GESS'], type='l', lwd=2, col='blue')
head(values.real)
values.real
lines(t.values, values.real[], type='l', lwd=2, col='blue')
# Gess 3 score
text(0.2, 1, paste0('GESS = ', formatC(p.gess, format="e", digits=2)), cex=1.5)
#text(0.2, 0.9, paste0('P-GESS2 = ', formatC(p.gess2, format="e", digits=2)), cex=1.5)
#text(0.2, 1, paste0('P-GESS = ', formatC(p.gess, format="e", digits=2)), cex=1.5)
dev.off()
write.table(data.frame(Fraction_correct=values.real), paste0(out.folder, '/error_curve_real.tsv'), row.names=TRUE, col.names=TRUE, sep='\t', quote=FALSE)
write.table(data.frame(d.perm), paste0(out.folder, '/error_curve_permutations.tsv'), row.names=FALSE, col.names=TRUE, sep='\t', quote=FALSE)
write.table(data.frame(Pvalue=pvals), paste0(out.folder, '/error_curve_pvals.tsv'), row.names=TRUE, col.names=TRUE, sep='\t', quote=FALSE)
return(list(values.real, d.perm, pvals))
### Expression values
ids.TAUcon <- rownames(d.summary)
ids.valFrn <- rownames(d.summary1)
ids.valTem <- rownames(d.summary2)
log.TAUcon <- d.summary$log2FC_TAU_control
P.TAUcon <- d.summary$Pvalue_TAU_control
log.valFrn <- d.summary1$Log2FC
P.valFrn <- d.summary1$Pvalue
log.valTem <- d.summary2$Log2FC
P.valTem <- d.summary2$Pvalue
names(log.TAUcon) <- ids.TAUcon
names(P.TAUcon) <- ids.TAUcon
names(log.valFrn) <- ids.valFrn
names(P.valFrn) <- ids.valFrn
names(log.valTem) <- ids.valTem
names(P.valTem) <- ids.valTem
names(ids.TAUcon) <- gene.names
### Get module IDs
moduleColors <- labels2colors(wgcna.net$colors)
modules <- levels(as.factor(moduleColors))
names(moduleColors) <- ids.TAUcon
### Test against frontal dataset
# Filter out proteins that are found in one of the two sets (Note that proteins in FC2/P2 that are not in FC1/P1 are
# automatically ignored in fraction.correct, so there is no need to filter that dataset)
ids.both.frn <- ids.TAUcon %in% ids.valFrn
log.TAUcon.toTest.frn <- log.TAUcon[ids.both.frn]
P.TAUcon.toTest.frn <- P.TAUcon[ids.both.frn]
# Permutation test on all proteins
outfolder <- 'output/validation/all_frontal/'
figfolder <- 'figures/validation/all_frontal/'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
dir.create('rdata/validation')
# Permutation test per module
moduleColorsBoth.frn <- moduleColors[ids.both.frn]
for(m in modules){
print(m)
inModule <- moduleColorsBoth.frn == m
m.ids <- names(moduleColorsBoth.frn[inModule])
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
outfolder <- paste0('output/validation/module_', m, '_frontal/')
figfolder <- paste0('figures/validation/module_', m, '_frontal/')
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_frontal.RData'))
# Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey'){
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valFrn & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
#m.ids <- names(moduleColors[ids.both][inModule])
#log.TAUcon.module <- log.TAUcon[ids.both]
#P.TAUcon.module <- P.TAUcon[ids.both]
#outfolder <- paste0('Figures/Validation4/Module_', m, '_frontal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_frontal4_hotnet.RData'))
}
source('src/validation.R')
for(m in modules){
print(m)
inModule <- moduleColorsBoth.frn == m
m.ids <- names(moduleColorsBoth.frn[inModule])
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
outfolder <- paste0('output/validation/module_', m, '_frontal/')
figfolder <- paste0('figures/validation/module_', m, '_frontal/')
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_frontal.RData'))
# Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey'){
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valFrn & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
#m.ids <- names(moduleColors[ids.both][inModule])
#log.TAUcon.module <- log.TAUcon[ids.both]
#P.TAUcon.module <- P.TAUcon[ids.both]
#outfolder <- paste0('Figures/Validation4/Module_', m, '_frontal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_frontal4_hotnet.RData'))
}
############ Test against temporal dataset
# Filter out proteins that are found in one of the two sets
ids.both.tem <- ids.TAUcon %in% ids.valTem
log.TAUcon.toTest.tem <- log.TAUcon[ids.both.tem]
P.TAUcon.toTest.tem <- P.TAUcon[ids.both.tem]
# Permutation test on all proteins
outfolder <- 'output/validation/all_temporal'
figfolder <- 'figures/validation/all_temporal'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
# Permutation test per module
moduleColorsBoth <- moduleColors[ids.both]
# Permutation test per module
moduleColorsBoth <- moduleColors[ids.both.tem]
# Permutation test per module
moduleColorsBoth.tem <- moduleColors[ids.both.tem]
del(moduleColorsBoth)
rem(moduleColorsBoth)
remove(moduleColorsBoth)
for(m in modules){
print(m)
inModule <- moduleColorsBoth.tem == m
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
m.ids <- names(moduleColorsBoth[inModule])
outfolder <- paste0('output/validation/module_', m, '_temporal/')
figfolder <- paste0('figures/validation/module_', m, '_temporal/')
dir.create(outfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_temporal.RData'))
## Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey') {
#  # Skip empty files
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valTem & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
##log.TAUcon.module <- log.TAUcon[ids.both]
##P.TAUcon.module <- P.TAUcon[ids.both]
#m.ids <- names(moduleColors[ids.both][inModule])
#outfolder <- paste0('Figures/Validation4/Module_', m, '_temporal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_temporal4_hotnet.RData'))
}
for(m in modules){
print(m)
inModule <- moduleColorsBoth.tem == m
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
m.ids <- names(moduleColorsBoth.tem[inModule])
outfolder <- paste0('output/validation/module_', m, '_temporal/')
figfolder <- paste0('figures/validation/module_', m, '_temporal/')
dir.create(outfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_temporal.RData'))
## Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey') {
#  # Skip empty files
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valTem & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
##log.TAUcon.module <- log.TAUcon[ids.both]
##P.TAUcon.module <- P.TAUcon[ids.both]
#m.ids <- names(moduleColors[ids.both][inModule])
#outfolder <- paste0('Figures/Validation4/Module_', m, '_temporal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_temporal4_hotnet.RData'))
}
for(m in modules){
print(m)
inModule <- moduleColorsBoth.tem == m
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
m.ids <- names(moduleColorsBoth.tem[inModule])
outfolder <- paste0('output/validation/module_', m, '_temporal/')
figfolder <- paste0('figures/validation/module_', m, '_temporal/')
dir.create(outfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_temporal.RData'))
## Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey') {
#  # Skip empty files
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valTem & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
##log.TAUcon.module <- log.TAUcon[ids.both]
##P.TAUcon.module <- P.TAUcon[ids.both]
#m.ids <- names(moduleColors[ids.both][inModule])
#outfolder <- paste0('Figures/Validation4/Module_', m, '_temporal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_temporal4_hotnet.RData'))
}
FC1, FC2, P1, P2, out.folder, fig.folder
FC2 <- log.valTem
P2 <- log.valTem
outfolder
figfolder
out.folder <- outfolder
fig.folder <- figfolder
print(m)
inModule <- moduleColorsBoth.tem == m
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
m.ids <- names(moduleColorsBoth.tem[inModule])
outfolder <- paste0('output/validation/module_', m, '_temporal/')
figfolder <- paste0('figures/validation/module_', m, '_temporal/')
dir.create(outfolder, showWarnings=FALSE)
for(m in modules){
print(m)
inModule <- moduleColorsBoth.tem == m
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
m.ids <- names(moduleColorsBoth.tem[inModule])
outfolder <- paste0('output/validation/module_', m, '_temporal/')
figfolder <- paste0('figures/validation/module_', m, '_temporal/')
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_temporal.RData'))
## Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey') {
#  # Skip empty files
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valTem & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
##log.TAUcon.module <- log.TAUcon[ids.both]
##P.TAUcon.module <- P.TAUcon[ids.both]
#m.ids <- names(moduleColors[ids.both][inModule])
#outfolder <- paste0('Figures/Validation4/Module_', m, '_temporal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valTem, P.TAUcon, P.valTem, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_temporal4_hotnet.RData'))
}
### Test against frontal dataset
# Filter out proteins that are found in one of the two sets (Note that proteins in FC2/P2 that are not in FC1/P1 are
# automatically ignored in fraction.correct, so there is no need to filter that dataset)
ids.both.frn <- ids.TAUcon %in% ids.valFrn
log.TAUcon.toTest.frn <- log.TAUcon[ids.both.frn]
P.TAUcon.toTest.frn <- P.TAUcon[ids.both.frn]
# Permutation test on all proteins (frontal)
outfolder <- 'output/validation/all_frontal/'
figfolder <- 'figures/validation/all_frontal/'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.allFrn <- permutation.test(log.TAUcon.toTest.frn, log.valFrn, P.TAUcon.toTest.frn, P.valFrn, outfolder, figfolder)
save(perm.allFrn, file='rdata/validation/permutation_all_frontal.RData')
# Permutation test per module (frontal)
moduleColorsBoth.frn <- moduleColors[ids.both.frn]
for(m in modules){
print(m)
inModule <- moduleColorsBoth.frn == m
m.ids <- names(moduleColorsBoth.frn[inModule])
#log.TAUcon.module <- log.TAUcon.toTest[inModule]
#P.TAUcon.module <- P.TAUcon.toTest[inModule]
outfolder <- paste0('output/validation/module_', m, '_frontal/')
figfolder <- paste0('figures/validation/module_', m, '_frontal/')
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.module <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, figfolder, m.ids=m.ids)
save(perm.module, file=paste0('rdata/validation/permutation_', m, '_frontal.RData'))
# Do the same, but only for those ids that were significant in HotNet
#if (m == 'red'){
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_001_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#} else if (m == 'grey'){
#  next
#} else {
#  d.hotnet <- read.table(paste0('C:/Users/jhmva/surfdrive/PhD/ftdproject_related_stuff/HotNet/Modules/HotNet_results_100/consensus_edges_Pval_003_', m, '.tsv'), header=FALSE, quote='', sep='\t')
#}
#names.hotnet <- levels(as.factor(c(d.hotnet[,1], d.hotnet[,2])))
#ids.hotnet <- as.character(ids.TAUcon.named[names.hotnet])
#ids.both <- ids.TAUcon %in% ids.valFrn & ids.TAUcon %in% ids.hotnet
#inModule <- moduleColors[ids.both] == m
#m.ids <- names(moduleColors[ids.both][inModule])
#log.TAUcon.module <- log.TAUcon[ids.both]
#P.TAUcon.module <- P.TAUcon[ids.both]
#outfolder <- paste0('Figures/Validation4/Module_', m, '_frontal_hotnet/')
#dir.create(outfolder, showWarnings=FALSE)
#perm.module.hotnet <- permutation.test(log.TAUcon, log.valFrn, P.TAUcon, P.valFrn, outfolder, m.ids=m.ids)
#save(perm.module.hotnet, file=paste0('Output/Permutation_', m, '_frontal4_hotnet.RData'))
}
############ Test against temporal dataset
# Filter out proteins that are found in one of the two sets
ids.both.tem <- ids.TAUcon %in% ids.valTem
log.TAUcon.toTest.tem <- log.TAUcon[ids.both.tem]
P.TAUcon.toTest.tem <- P.TAUcon[ids.both.tem]
# Permutation test on all proteins
outfolder <- 'output/validation/all_temporal'
figfolder <- 'figures/validation/all_temporal'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.allTem <- permutation.test(log.TAUcon.toTest.tem, log.valTem, P.TAUcon.toTest.tem, P.valTem, outfolder, figfolder)
save(perm.allTem, file='rdata/validation/permutation_all_temporal.RData')
############ Test against temporal dataset
# Filter out proteins that are found in one of the two sets
ids.both.tem <- ids.TAUcon %in% ids.valTem
log.TAUcon.toTest.tem <- log.TAUcon[ids.both.tem]
P.TAUcon.toTest.tem <- P.TAUcon[ids.both.tem]
# Permutation test on all proteins
outfolder <- 'output/validation/all_temporal'
figfolder <- 'figures/validation/all_temporal'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
perm.allTem <- permutation.test(log.TAUcon.toTest.tem, log.valTem, P.TAUcon.toTest.tem, P.valTem, outfolder, figfolder)
save(perm.allTem, file='rdata/validation/permutation_all_temporal.RData')
# Permutation test on all proteins
outfolder <- 'output/validation/all_temporal/'
figfolder <- 'figures/validation/all_temporal/'
dir.create(outfolder, showWarnings=FALSE)
dir.create(figfolder, showWarnings=FALSE)
